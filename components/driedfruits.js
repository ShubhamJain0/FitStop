import { StatusBar } from 'expo-status-bar';
import React, { useState, useEffect, useRef } from 'react';
import { StyleSheet, Text, View, RefreshControl, ScrollView, SafeAreaView, Image, Button, TouchableOpacity, ActivityIndicator, Animated, Dimensions, FlatList, TextInput } from 'react-native';
import { heightPercentageToDP as hp, widthPercentageToDP as wp } from 'react-native-responsive-screen';
import { Ionicons, FontAwesome, FontAwesome5, MaterialCommunityIcons } from "@expo/vector-icons";
import Svg, { Path, G, Rect, Circle } from 'react-native-svg';
import AsyncStorage from '@react-native-async-storage/async-storage';


export default function DriedFruits({ navigation }) {

    const [driedfruitslist, setDriedFruitsList] = useState([]);
    const [filteredList, setFilteredList] = useState([]);
    const [cartStatus, setCartStatus] = useState(401);
    const [cartData, setCartData] = useState([]);

    const [loading, setLoading] = useState('true');
    const [refreshing, setRefreshing] = useState(false);
    const [refreshOpacity, setRefreshOpacity] = useState(0);


    const animation = new Animated.Value(0);
    const screenHeight = Dimensions.get("window").height;

    const [query, setQuery] = useState('');
    const searchInputRef = useRef(null);


    useEffect(() => {
            let mounted = true;
            let timeOut = setTimeout(() => setRefreshOpacity(1), 5000)
            fetch('http://192.168.29.234:8000/store/dried-fruitslist/',{
            method: 'GET',
            headers: {
                'Content-type': 'application/json'
            }
            })
            .then(resp =>  resp.json().then(data => ({status: resp.status, json: data})))
            .then(resp => {if (mounted) {setDriedFruitsList(resp.json); setFilteredList(resp.json)}})
            .then(() =>  {if (mounted) {setLoading('false')}})
            .catch(error => console.log(error))

        return () => {
            mounted = false;
            clearTimeout(timeOut);
        }
    
    }, [])


    useEffect(() => {
        let mounted = true;
        const getCart = navigation.addListener('focus', () => {
            (async () => {
                const token = await AsyncStorage.getItem('USER_TOKEN')
                if (token) {
                    fetch('http://192.168.29.234:8000/store/cart/',{
                        method: 'GET',
                        headers: {
                            'Authorization': `Token ${token}`,
                            'Content-type': 'application/json'
                        }
                    })
                    .then(resp =>  resp.json().then(data => ({status: resp.status, json: data})))
                    .then(resp => {if (mounted) {setCartData(resp.json), setCartStatus(resp.status)}})
                    .catch(error => console.log(error))
                } else {
                    if (mounted) {
                        setCartData([]);
                    }
                }

            })().catch(error => console.log(error))
        });

        return () => {
            mounted = false;
        }
        
    }, [navigation])


    const searchFilterFunction = (text) => {
        // Check if searched text is not blank
        if (text) {
          // Inserted text is not blank
          // Filter the masterDataSource
          // Update FilteredDataSource
          const newData = driedfruitslist.filter(
            function (item) {
              const itemData = item.name
                ? item.name.toUpperCase()
                : ''.toUpperCase();
              const textData = text.toUpperCase();
              return itemData.indexOf(textData) > -1;
          });
          setFilteredList(newData);
          setQuery(text);
        } else {
          // Inserted text is blank
          // Update FilteredDataSource with masterDataSource
          setFilteredList(driedfruitslist);
          setQuery(text);
        }
      };



    const wait = timeout => {
        return new Promise(resolve => {
          setTimeout(resolve, timeout);
        });
    };


    const onRefresh = React.useCallback(() => {
        setRefreshing(true);
    
        wait(2000).then(() => setRefreshing(false))
    
        fetch('http://192.168.29.234:8000/store/dried-fruitslist/',{
            method: 'GET',
            headers: {
            'Content-type': 'application/json'
            }
        })
        .then(resp =>  resp.json().then(data => ({status: resp.status, json: data})))
        .then(resp => setFilteredList(resp.json))
        .then(() =>  setLoading('false'))
        .catch(error => console.log(error))
    
        
    }, []);


    const buildCart = (item) => async evt => {
        const token =  await AsyncStorage.getItem('USER_TOKEN')
        if (token) {
            return fetch('http://192.168.29.234:8000/store/cart/',{
                method: 'POST',
                headers: {
                'Authorization': `Token ${token}`,
                'Content-type': 'application/json'
                },
                body: JSON.stringify({ ordereditem: item })
            })
            .then(resp =>  resp.json().then(data => ({status: resp.status, json: data})))
            .then(resp => setCartData(resp.json.cart))
            .catch(error => console.log(error))
        } else {
            navigation.navigate('Auth')
        }
    }


    const reduceItem = (item) => async evt => {
        const token = await AsyncStorage.getItem('USER_TOKEN')
        if (token) {
        return fetch('http://192.168.29.234:8000/store/reduceordelete/',{
            method: 'POST',
            headers: {
            'Authorization': `Token ${token}`,
            'Content-type': 'application/json'
            },
            body: JSON.stringify({ reduceitem: item })
        })
        .then(resp =>  resp.json().then(data => ({status: resp.status, json: data})))
        .then(resp => setCartData(resp.json.cart))
        .catch(error => console.log(error))
        } else {
            navigation.navigate('Auth')
        }
    }


    const search = (item) => {
        if (cartStatus !== 401) {
            for (var i=0; i < cartData.length; i++) {
                if (cartData[i].ordereditem === item.name) {
                    return cartData[i];
                }
            }
        }
    }


    const handleOpen = () => {
        Animated.timing(animation, {
          toValue: 1,
          duration: 1,
          useNativeDriver: true,
        }).start();
      };


    const handleClose = () => {
        Animated.timing(animation, {
          toValue: 0,
          duration: 1000,
          useNativeDriver: true,
        }).start();
        
      };


    const slideUp = {
        transform: [
          {
            translateY: animation.interpolate({
              inputRange: [0.01, 1],
              outputRange: [0, -1 * screenHeight],
            }),
          },
        ],
    };



    if (loading == 'true') {
        return (
            <SafeAreaView style={styles.refreshcontainer}>
                    <View style={{flex: 0.5, paddingTop: hp(15)}}>
                        <TouchableOpacity style={{alignItems: 'center', marginBottom: hp(15)}} onPress={() => navigation.navigate('cart')}>
                            <Svg height={hp(5)} viewBox="0 0 512 512" width="512"><Path fill="#99B898" d="M509.739,89.437c-2.022-2.586-5.122-4.097-8.405-4.096H96c-5.891-0.001-10.668,4.773-10.669,10.664  c0,0.717,0.072,1.433,0.216,2.136l42.667,213.333c1.079,5.531,6.274,9.269,11.861,8.533l320-42.667c4.339-0.58,7.883-3.752,8.939-8  L511.68,98.674C512.505,95.461,511.787,92.046,509.739,89.437z"/><G><Circle fill="#455A64" cx="394.667" cy="437.341" r="53.333"/><Circle fill="#455A64" cx="181.333" cy="437.341" r="53.333"/><Path fill="#455A64" d="M191.125,362.674h246.208c5.891,0,10.667-4.776,10.667-10.667c0-5.891-4.776-10.667-10.667-10.667   H191.125c-25.408-0.053-47.272-17.976-52.309-42.88L85.12,29.874c-1.014-4.967-5.384-8.534-10.453-8.533h-64   C4.776,21.341,0,26.116,0,32.007s4.776,10.667,10.667,10.667H65.92l51.989,259.968   C124.954,337.505,155.557,362.598,191.125,362.674z"/></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G></Svg>
                        </TouchableOpacity>
                        <TouchableOpacity disabled={true} style={{alignItems: 'center', margin: hp(4), opacity: 0.2}} onPress={() => navigation.navigate('Fruits')} >
                            <Svg height={hp(5)} viewBox="0 0 512 512" width="512"><Path d="M488,320H448V272a135.646,135.646,0,0,0-43.391-99.5c10.8-28.9,40.247-54.13,40.558-54.4A8,8,0,0,0,440,104c-23.13,0-43.238,4.541-60.1,13.524a142.337,142.337,0,0,1,10.562-15.341,184.9,184.9,0,0,1,22.7-24.076A8,8,0,0,0,408,64c-21.625,0-40.7,4.027-56.942,11.959-2.243-16.727-9.829-46.289-35.48-59.114a8,8,0,0,0-7.156,0C282.8,29.656,275.2,59.167,272.949,75.905,256.76,67.993,237.716,64,216,64a8,8,0,0,0-5.171,14.1,184.837,184.837,0,0,1,22.706,24.079,142.487,142.487,0,0,1,10.541,15.3C227.247,108.527,207.157,104,184,104a8,8,0,0,0-5.171,14.1c.315.267,29.76,25.5,40.562,54.4A135.646,135.646,0,0,0,176,272v.918c-8.827,1.677-20.508,5.5-26.746,10.183a23.539,23.539,0,0,1-2.789,1.79c2.107-19.267,5.837-38.922,12.191-48.453h0a8,8,0,1,0-13.312-8.874h0c-7.253,10.88-12.349,30.82-15.161,59.241a22.682,22.682,0,0,1-7.437-3.7C114.308,276.767,95.9,272,88.088,272c-20.916,0-39.788,8.528-53.139,24.013-15.217,17.65-21.717,42.736-17.834,68.825l5,33.577a177.583,177.583,0,0,0,20.514,60.658c13.061,23.4,35.725,36.958,59.7,36.957a64.634,64.634,0,0,0,17.45-2.416q.273-.076.538-.172l13.382-4.787a6.774,6.774,0,0,1,4.61,0l13.381,4.787c.177.064.357.121.538.172a64.646,64.646,0,0,0,17.451,2.416c17.534,0,34.364-7.261,47.253-20.313A199.9,199.9,0,0,0,304,496c49.8,0,97.916-18.855,135.5-53.091C475.405,410.194,496,368.312,496,328A8,8,0,0,0,488,320ZM278.225,279.9l33.88-32.9,33.948,32.957L312.188,312.8Zm18.4,40.1h-45.74a79.537,79.537,0,0,0-4.13-9.541l19.983-19.406Zm60.911-28.894L387.3,320h-59.56Zm-33.951-55.258,33.851-32.874,33.976,33-33.87,32.843Zm5.6-82.612a119.134,119.134,0,0,1,41.788,14.289l-13.537,13.146Zm16.768,38.587L312.1,224.7l-33.835-32.847,33.859-32.881ZM266.783,180.7l-13.64-13.242A119.1,119.1,0,0,1,295.108,153.2Zm0,22.3L300.62,235.85l-33.893,32.914-33.876-32.81Zm-11.541,76.915L237.775,296.88c-.241-.289-.478-.582-.724-.867a68.407,68.407,0,0,0-42.16-23.195l26.476-25.712Zm-5.356,118.5,5-33.577A96.693,96.693,0,0,0,254.92,336H446.578c-4.613,26.417-20.233,52.881-43.795,73.749C374.932,434.416,339.85,448,304,448a146.623,146.623,0,0,1-62.955-14.49A180.97,180.97,0,0,0,249.887,398.415ZM418.457,320,432,306.884V320ZM432,284.611l-29.126,28.207-33.843-32.855L402.9,247.121,432,275.383Zm-1.784-33.265L414.39,235.978l8.963-8.692A118.908,118.908,0,0,1,430.216,251.346Zm-14.237-39.2-13.073,12.677-33.984-33,15.722-15.268A120.912,120.912,0,0,1,415.979,212.149Zm2.981-90.616c-9.188,10.128-20.267,24.372-27.277,40.326a136.15,136.15,0,0,0-22.812-13.381c.1-1.246.252-2.492.448-3.738C382.207,132.4,398.843,124.627,418.96,121.533Zm-32.009-40c-12.99,14.321-29.755,36.867-33.466,60.941a134.954,134.954,0,0,0-28.978-5.9c-.938-2.913-2.139-6.209-3.664-9.75C330.666,108.008,349.8,87.269,386.951,81.538ZM312,33.207c19.825,12.915,23.276,42.533,23.875,51.9a97.241,97.241,0,0,0-23.887,25.235,98.949,98.949,0,0,0-12.629-15.592,97.243,97.243,0,0,0-11.232-9.665C288.729,75.695,292.19,46.112,312,33.207ZM237.06,81.55c44.324,6.88,62.782,35.164,70.312,54.537a135.295,135.295,0,0,0-36.857,6.392q-.375-2.436-.924-4.847l.282-.261c-.146-.158-.3-.31-.444-.466C264.231,114.961,249.04,94.76,237.06,81.55Zm-32.024,39.979c20.14,3.091,36.762,10.874,49.648,23.227.194,1.24.347,2.482.445,3.722a136.15,136.15,0,0,0-22.812,13.381C225.306,145.9,214.225,131.657,205.036,121.529Zm34.424,54.947L255.3,191.853l-33.946,32.965-13.24-12.824A120.9,120.9,0,0,1,239.46,176.476Zm-38.74,50.632,9.149,8.862-16.133,15.666A118.986,118.986,0,0,1,200.72,227.108ZM215.4,451.275C205.259,469.45,187.833,480,169.534,480a48.131,48.131,0,0,1-12.734-1.724L143.7,473.59a22.893,22.893,0,0,0-15.39,0L115.2,478.279c-22.6,6.191-46.118-4.634-58.6-27a161.624,161.624,0,0,1-18.659-55.216l-5-33.576c-3.2-21.482,1.952-41.9,14.127-56.022A53.249,53.249,0,0,1,88.088,288c5.082,0,19.94,4.059,25.053,7.9a38.271,38.271,0,0,0,15.75,7.013c-.394,6.368-.614,11.965-.737,16.251-6.914-1.552-10.4-4.729-10.589-4.907l.088.087a8,8,0,1,0-11.306,11.321C107.42,326.733,117.244,336,136,336c18.772,0,28.6-9.285,29.657-10.343a8,8,0,1,0-11.314-11.314c-.042.042-3.459,3.148-10.2,4.739.139-4.833.392-10.492.793-16.568a38.372,38.372,0,0,0,13.922-6.617c5.113-3.838,19.971-7.9,25.053-7.9a53.249,53.249,0,0,1,41.021,18.461c12.175,14.121,17.324,34.54,14.127,56.022l-5,33.576A161.639,161.639,0,0,1,215.4,451.275ZM428.72,431.081C394.093,462.627,349.8,480,304,480a183.62,183.62,0,0,1-76.872-17.161c.775-1.227,1.528-2.479,2.246-3.766q2.953-5.29,5.529-10.772A162.625,162.625,0,0,0,304,464c39.762,0,78.611-15.013,109.392-42.274,27.05-23.957,44.751-54.839,49.387-85.726h16.914C477.149,369.353,458.89,403.6,428.72,431.081Z" fill="black" /></Svg>
                        </TouchableOpacity>
                        <TouchableOpacity disabled={true} style={{alignItems: 'center', margin: hp(4)}} onPress={() => navigation.navigate('Dried-Fruits')} >
                            <Svg viewBox="0 0 512 512" height={hp(4)} width="512"><Path d="m489.037 105.038c-3.312-17.874-19.306-30.636-37.469-29.898-36.189 1.47-101.748 12.432-176.683 63.716 18.927 48.477 32.599 110.867 32.599 190.009 0 95.718-45.27 159.433-106.78 177.713 57.487 17.201 127.021-6.14 182.995-76.288 119.018-149.16 115.241-271.813 105.338-325.252z" fill="#994e37"/><Path d="m139.025 8.929c13.737-11.905 34.199-11.905 47.936 0 41.071 35.594 120.523 129.112 120.523 319.936 0 114.427-64.691 183.135-144.491 183.135s-144.491-68.708-144.491-183.135c.001-190.824 79.453-284.342 120.523-319.936z" fill="#cc624e"/><Path d="m307.484 328.865c0 95.718-45.27 159.433-106.78 177.713 10.165 3.042 20.708 4.809 31.484 5.281 56.028-23.451 95.918-86.089 95.918-176.926 0-87.435-16.324-154.87-38.114-205.957-4.989 3.116-10.026 6.402-15.107 9.88 18.927 48.477 32.599 110.867 32.599 190.009z" fill="#8c4534"/><Path d="m186.961 8.929c-9.378-8.128-21.891-10.702-33.258-7.732 5.283 1.38 10.319 3.955 14.678 7.732 41.071 35.594 120.523 129.112 120.523 319.936 0 109.951-59.731 177.677-135.2 182.809 3.073.209 6.169.327 9.29.327 79.8 0 144.491-68.708 144.491-183.135-.001-190.825-79.453-284.343-120.524-319.937z" fill="#bc574a"/><G fill="#994e37"><Path d="m199.189 20.266c-4.339-4.289-8.447-8.061-12.228-11.337-4.178-3.621-8.979-6.133-14.022-7.552 10.591 19.477 24.395 51.154 36.138 98.83 15.865 64.414 23.909 141.343 23.909 228.65 0 105.965-26.591 168.014-56.383 182.454 10.856-1.091 21.361-3.491 31.385-7.137 6.329-8.244 12.081-18.354 17.103-30.227 15.294-36.161 23.379-86.332 23.379-145.089 0-88.553-8.195-166.728-24.359-232.353-7.86-31.911-16.674-56.986-24.922-76.239z"/><Path d="m93 328.858c0-87.306 8.044-164.235 23.909-228.65 11.743-47.676 25.548-79.354 36.139-98.831-5.044 1.418-9.845 3.931-14.023 7.552-3.781 3.277-7.889 7.048-12.228 11.337-8.248 19.253-17.063 44.327-24.922 76.238-16.163 65.625-24.359 143.8-24.359 232.353 0 58.757 8.085 108.927 23.38 145.089 5.022 11.873 10.773 21.983 17.102 30.227 10.024 3.646 20.529 6.046 31.385 7.138-29.792-14.439-56.383-76.488-56.383-182.453z"/><Path d="m170.735 511.779v-510.951c-5.099-1.098-10.385-1.098-15.484 0v510.951c2.564.145 5.145.221 7.742.221 2.598 0 5.178-.077 7.742-.221z"/></G><Path d="m295.232 207.101c70.113-68.217 140.579-114.988 172.374-128.967-4.923-2.141-10.375-3.224-16.039-2.994-4.152.169-8.695.464-13.591.93-36.409 20.94-91.027 60.193-146.868 113.496 1.457 5.698 2.832 11.544 4.124 17.535z" fill="#70362b"/><Path d="m491.574 121.937c-.727-6.222-1.604-11.868-2.536-16.899-1.019-5.499-3.242-10.511-6.356-14.798-4.464 28.126-16.949 66.306-34.106 103.935-28.581 62.683-69.958 126.438-122.983 189.497-12.223 14.536-24.016 26.667-34.974 36.982-6.593 15.835-14.933 29.806-24.697 41.753 18.807-15.262 44.017-36.06 71.522-68.77 53.928-64.133 96.059-129.08 125.22-193.038 14.727-32.302 23.586-58.781 28.91-78.662z" fill="#70362b"/><Path d="m305.924 283.683c.534 7.597.944 15.361 1.205 23.316l174.278-218.414c-3.301-4.038-7.432-7.335-12.103-9.657z" fill="#70362b"/><Path d="m311.215 191.917c-5.316 4.934-10.653 10.003-15.979 15.185-1.286-5.868-2.642-11.718-4.129-17.538 5.161-4.934 10.323-9.744 15.453-14.431 1.631 5.45 3.179 11.045 4.655 16.784z" fill="#5e2b25"/><Path d="m323.468 386.178c-2.188 11.489-5.12 22.328-8.723 32.495-18.55 18.983-35.324 32.784-48.815 43.726 5.21-6.396 9.905-13.204 14.067-20.325 2.004-3.43 3.897-6.927 5.65-10.492 1.766-3.593 3.297-7.294 4.975-10.927 10.312-9.713 21.378-21.047 32.846-34.477z" fill="#5e2b25"/><Path d="m326.1 283.21v.01l-18.962 23.763-.01.01c-.134-3.974-.299-7.907-.495-11.789-.206-3.881-.444-7.721-.712-11.52l.021-.021 18.003-22.565c.834 7.196 1.567 14.566 2.155 22.112z" fill="#5e2b25"/></Svg>
                        </TouchableOpacity>
                        <TouchableOpacity disabled={true} style={{alignItems: 'center', margin: hp(4), opacity: 0.2}} onPress={() => navigation.navigate('Exotics')} >
                            <Svg  viewBox="0 0 512 512" height={hp(4)} width="512" stroke="black" strokeWidth="5"><Path d="m490 216.9c4.7-9.5 7.2-20 7.2-30.6 0-35.7-27.3-65.2-62.2-68.6 3.2-14.6-2.1-30.8-14.7-43.2-16.8-16.6-40.5-21.7-61.8-13.8-8-14.8-21.2-27.3-38.5-36.5-18.3-9.7-40-14.7-60.9-14.1-19.7.6-38.1 6.1-53.3 15.9-15.4 10-27.2 24-35 41.7-22.7-10.4-45.1-9.5-63.8 2.6-20.6 13.3-33 38.8-31.1 63.5.1 1.2.2 2.3.4 3.5-30.3-1.6-57.7 19.7-62.9 50.3-4.9 29.1 11.8 56.9 38.5 66.8-6.4 13.1-6.6 28.5-.4 41.9 8.3 18 26.1 28.6 44.7 28.6 4.1 0 8.2-.5 12.3-1.6l71.6 153.9c5.9 12.7 18.7 20.8 32.6 20.8h.4l86.4-.9c15.7-.2 29.3-10.3 34-25.3 1.5-5 3.1-10.1 4.7-15.3 12.6-41.2 27.5-90.3 57.9-140.6 4.8 1.9 9.9 2.9 14.9 2.9 7.5 0 15.1-2.1 21.7-6.4 8.2-5.3 14.2-13.3 17-22.5 1.4.1 2.7.2 4.1.2 25.1 0 45.5-20.4 45.5-45.5.1-10.1-3.2-19.8-9.3-27.7zm-464.7-27.2c4.4-25.7 28.3-43.3 54-40 .7 1.9 1.4 3.7 2.2 5.5-8.7 10.7-13.9 23.9-14.6 37.6-.8 15.3 4 30.2 13.5 42.1 2.6 3.3 5.5 6.2 8.7 8.9-7.7 2.7-16 3.4-24.1 2-26.4-4.6-44.2-29.7-39.7-56.1zm37.1 101.7c-5-10.9-4.4-23.4 1.4-33.8 3.1.5 6.2.7 9.3.7 1.7 0 3.3-.1 5-.2l25.2 54.2c-16.4 3.2-33.6-5-40.9-20.9zm264.3 161.6c-1.6 5.2-3.1 10.3-4.7 15.3-3.1 10-12.2 16.8-22.7 16.9l-86.4.9c-.1 0-.2 0-.3 0-9.3 0-17.8-5.4-21.8-13.9l-100.5-216.4c3.7-1.1 7.4-2.6 10.9-4.4 6.7 3.3 14.1 5.5 21.9 6.2 1.3.1 2.6.2 4 .2 7.8 15.3 40.2 78.7 50.3 96.6 5 9 13 14.2 21.1 14.2 1.6 0 3.3-.2 4.9-.6 10.2-2.7 16.8-13 16.7-26.2 0-.2 0-.3 0-.5l-7.1-86.1c9.9 5.2 20.3 8.9 31 11l17.8 100.9c2.1 11.9 12.3 20.2 24 20.2 1.2 0 2.3-.1 3.5-.3 6.7-1 12.7-4.7 16.6-10.2l78.5-113.1c2.4.3 4.8.4 7.2.4 6.8 0 13.5-1 20-3 1 2.2 2.2 4.4 3.5 6.4-52 66.1-72.1 132.2-88.4 185.5zm-149.4-182.7c-11.6 4.3-23.7 2.7-32.8-4.5-1.7-3.4-3.2-6.3-4.5-8.8 10.8-1.8 21.1-6.4 30-13.5 4.2-3.4 8-7.3 11.2-11.5 5.7 5.7 11.7 10.7 17.9 15.1-2.8 10.4-10.8 19.1-21.8 23.2zm24.5-3 6.2 74.8c0 7.5-3.1 13.1-7.8 14.3-4.3 1.1-9.1-1.9-12.5-7.8-6.2-11.2-21.8-41.1-34.2-65.3 3.5.9 7.2 1.3 10.9 1.3 5.7 0 11.4-1 17.1-3.2 8.1-2.9 15-7.8 20.3-14.1zm128.7-18.8c3.3-2.2 6.6-4.5 9.7-7 .1.2.3.3.4.5 8.4 9.1 19 15.8 30.8 19.3l-75.6 108.8c-2 2.8-5 4.7-8.4 5.2-5.4.8-10.5-2-12.9-6.7zm-60 100.3-9.2-51.9c7.5 4.3 16.6 7.2 26 7.2 1.4 0 2.7-.1 4.1-.2zm27.3-58.7c-14.4 5.7-32.8-2.2-39.6-11.1l-1.9-11c2.9.2 5.9.4 8.9.4 16.5 0 32.5-3.5 47.5-10.1zm128.6 12.2c-7.2 4.6-15.8 5.7-23.7 3.2 6.1-9.5 12.8-19 20.2-28.5 4.5 4.3 9.8 7.7 15.4 9.9-2.1 6.4-6.3 11.8-11.9 15.4zm27.5-24.2c-12.7 0-25.6-9.1-31.3-21.4 5.5-2.8 10.8-6.4 15.5-10.8 7.3-6.7 13-14.9 16.9-24 1.4-3.3-.4-7.1-3.9-8.1-2.9-.8-6 .7-7.2 3.5-3.1 7.5-7.9 14.2-13.9 19.8-14.6 13.5-34.8 18.3-54 13-10.2-2.8-19.3-8.5-26.5-16.3-12.5-13.5-17.6-32.3-13.8-50.4 1.6-7.8 4.9-15.1 9.5-21.5 1.6-2.2 1.6-5.1 0-7.2-2.4-3.2-7.3-3.2-9.6 0-5.7 7.8-9.6 16.7-11.6 26.2-3.7 17.6-.3 35.9 9.1 50.9-20 16.1-43.4 24.5-67.8 24.5-28.6 0-55.3-12-77.4-34.8 4.8-9.7 7.2-20.6 6.7-31.5-.2-3.6-3.4-6.3-6.9-5.7-3.1.5-5.2 3.2-5.1 6.3.8 16.6-6.6 32.9-20 43.6-11 8.8-24.6 12.9-38.4 11.6-13.7-1.3-25.9-7.9-34.4-18.5-14-17.5-14.3-42.6-1.6-61.1 6.7 8.8 15.9 16 27.2 21 3 1.4 6.6 0 7.9-3s0-6.6-3-7.9c-19.4-8.6-30.9-24-32.4-43.3-1.6-20.5 8.6-41.6 25.5-52.5 16.5-10.7 36.9-10.4 57.5.8 1.5.8 3.3 1 5 .3 1.6-.6 2.9-1.9 3.5-3.5 12.9-34.5 42-54.9 79.9-56 39.5-1.2 77.8 19.3 90.8 48.8.7 1.5 1.9 2.7 3.4 3.2 1.5.6 3.2.5 4.7-.3 21.8-10.7 42.5-1.8 53.6 9.2 13.8 13.6 13.9 28.4 9.5 37.7-.9 1.9-.7 4.1.4 5.9 1.2 1.8 3.1 2.8 5.3 2.7h1.2c31.4 0 57 25.5 57 57 0 10-2.6 19.8-7.6 28.4-1.3 2.3-1 5.2.8 7.1 5.8 6.2 9.1 14.3 9.1 22.9-.1 18.4-15.1 33.4-33.6 33.4z" fill="black" /></Svg>
                        </TouchableOpacity>      
                        
                    </View>
                    <View style={{flex: 1}}>
                        <ScrollView bounces={false}
                            contentContainerStyle={styles.refreshscrollview}
                            refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}
                        >
                            <ActivityIndicator color="red" size={50} />
                            <Text style={{color: 'black', marginTop: 10, opacity: refreshOpacity}}>Pull down to refresh</Text>
                        </ScrollView>
                    </View>
            </SafeAreaView>
        )
    }


    return (
        <View style={{flexDirection: 'row', backgroundColor: 'white', flex: 1}}>
                <View style={{flex: 0.5, paddingTop: hp(15)}}>
                    <TouchableOpacity style={{alignItems: 'center', marginBottom: hp(15)}} onPress={() => navigation.navigate('cart')}>
                        <Svg height={hp(5)} viewBox="0 0 512 512" width="512"><Path fill="#99B898" d="M509.739,89.437c-2.022-2.586-5.122-4.097-8.405-4.096H96c-5.891-0.001-10.668,4.773-10.669,10.664  c0,0.717,0.072,1.433,0.216,2.136l42.667,213.333c1.079,5.531,6.274,9.269,11.861,8.533l320-42.667c4.339-0.58,7.883-3.752,8.939-8  L511.68,98.674C512.505,95.461,511.787,92.046,509.739,89.437z"/><G><Circle fill="#455A64" cx="394.667" cy="437.341" r="53.333"/><Circle fill="#455A64" cx="181.333" cy="437.341" r="53.333"/><Path fill="#455A64" d="M191.125,362.674h246.208c5.891,0,10.667-4.776,10.667-10.667c0-5.891-4.776-10.667-10.667-10.667   H191.125c-25.408-0.053-47.272-17.976-52.309-42.88L85.12,29.874c-1.014-4.967-5.384-8.534-10.453-8.533h-64   C4.776,21.341,0,26.116,0,32.007s4.776,10.667,10.667,10.667H65.92l51.989,259.968   C124.954,337.505,155.557,362.598,191.125,362.674z"/></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G><G></G></Svg>
                    </TouchableOpacity>
                    <TouchableOpacity style={{alignItems: 'center', margin: hp(4), opacity: 0.2}} onPress={() => navigation.navigate('Fruits')} >
                        <Svg height={hp(5)} viewBox="0 0 512 512" width="512"><Path d="M488,320H448V272a135.646,135.646,0,0,0-43.391-99.5c10.8-28.9,40.247-54.13,40.558-54.4A8,8,0,0,0,440,104c-23.13,0-43.238,4.541-60.1,13.524a142.337,142.337,0,0,1,10.562-15.341,184.9,184.9,0,0,1,22.7-24.076A8,8,0,0,0,408,64c-21.625,0-40.7,4.027-56.942,11.959-2.243-16.727-9.829-46.289-35.48-59.114a8,8,0,0,0-7.156,0C282.8,29.656,275.2,59.167,272.949,75.905,256.76,67.993,237.716,64,216,64a8,8,0,0,0-5.171,14.1,184.837,184.837,0,0,1,22.706,24.079,142.487,142.487,0,0,1,10.541,15.3C227.247,108.527,207.157,104,184,104a8,8,0,0,0-5.171,14.1c.315.267,29.76,25.5,40.562,54.4A135.646,135.646,0,0,0,176,272v.918c-8.827,1.677-20.508,5.5-26.746,10.183a23.539,23.539,0,0,1-2.789,1.79c2.107-19.267,5.837-38.922,12.191-48.453h0a8,8,0,1,0-13.312-8.874h0c-7.253,10.88-12.349,30.82-15.161,59.241a22.682,22.682,0,0,1-7.437-3.7C114.308,276.767,95.9,272,88.088,272c-20.916,0-39.788,8.528-53.139,24.013-15.217,17.65-21.717,42.736-17.834,68.825l5,33.577a177.583,177.583,0,0,0,20.514,60.658c13.061,23.4,35.725,36.958,59.7,36.957a64.634,64.634,0,0,0,17.45-2.416q.273-.076.538-.172l13.382-4.787a6.774,6.774,0,0,1,4.61,0l13.381,4.787c.177.064.357.121.538.172a64.646,64.646,0,0,0,17.451,2.416c17.534,0,34.364-7.261,47.253-20.313A199.9,199.9,0,0,0,304,496c49.8,0,97.916-18.855,135.5-53.091C475.405,410.194,496,368.312,496,328A8,8,0,0,0,488,320ZM278.225,279.9l33.88-32.9,33.948,32.957L312.188,312.8Zm18.4,40.1h-45.74a79.537,79.537,0,0,0-4.13-9.541l19.983-19.406Zm60.911-28.894L387.3,320h-59.56Zm-33.951-55.258,33.851-32.874,33.976,33-33.87,32.843Zm5.6-82.612a119.134,119.134,0,0,1,41.788,14.289l-13.537,13.146Zm16.768,38.587L312.1,224.7l-33.835-32.847,33.859-32.881ZM266.783,180.7l-13.64-13.242A119.1,119.1,0,0,1,295.108,153.2Zm0,22.3L300.62,235.85l-33.893,32.914-33.876-32.81Zm-11.541,76.915L237.775,296.88c-.241-.289-.478-.582-.724-.867a68.407,68.407,0,0,0-42.16-23.195l26.476-25.712Zm-5.356,118.5,5-33.577A96.693,96.693,0,0,0,254.92,336H446.578c-4.613,26.417-20.233,52.881-43.795,73.749C374.932,434.416,339.85,448,304,448a146.623,146.623,0,0,1-62.955-14.49A180.97,180.97,0,0,0,249.887,398.415ZM418.457,320,432,306.884V320ZM432,284.611l-29.126,28.207-33.843-32.855L402.9,247.121,432,275.383Zm-1.784-33.265L414.39,235.978l8.963-8.692A118.908,118.908,0,0,1,430.216,251.346Zm-14.237-39.2-13.073,12.677-33.984-33,15.722-15.268A120.912,120.912,0,0,1,415.979,212.149Zm2.981-90.616c-9.188,10.128-20.267,24.372-27.277,40.326a136.15,136.15,0,0,0-22.812-13.381c.1-1.246.252-2.492.448-3.738C382.207,132.4,398.843,124.627,418.96,121.533Zm-32.009-40c-12.99,14.321-29.755,36.867-33.466,60.941a134.954,134.954,0,0,0-28.978-5.9c-.938-2.913-2.139-6.209-3.664-9.75C330.666,108.008,349.8,87.269,386.951,81.538ZM312,33.207c19.825,12.915,23.276,42.533,23.875,51.9a97.241,97.241,0,0,0-23.887,25.235,98.949,98.949,0,0,0-12.629-15.592,97.243,97.243,0,0,0-11.232-9.665C288.729,75.695,292.19,46.112,312,33.207ZM237.06,81.55c44.324,6.88,62.782,35.164,70.312,54.537a135.295,135.295,0,0,0-36.857,6.392q-.375-2.436-.924-4.847l.282-.261c-.146-.158-.3-.31-.444-.466C264.231,114.961,249.04,94.76,237.06,81.55Zm-32.024,39.979c20.14,3.091,36.762,10.874,49.648,23.227.194,1.24.347,2.482.445,3.722a136.15,136.15,0,0,0-22.812,13.381C225.306,145.9,214.225,131.657,205.036,121.529Zm34.424,54.947L255.3,191.853l-33.946,32.965-13.24-12.824A120.9,120.9,0,0,1,239.46,176.476Zm-38.74,50.632,9.149,8.862-16.133,15.666A118.986,118.986,0,0,1,200.72,227.108ZM215.4,451.275C205.259,469.45,187.833,480,169.534,480a48.131,48.131,0,0,1-12.734-1.724L143.7,473.59a22.893,22.893,0,0,0-15.39,0L115.2,478.279c-22.6,6.191-46.118-4.634-58.6-27a161.624,161.624,0,0,1-18.659-55.216l-5-33.576c-3.2-21.482,1.952-41.9,14.127-56.022A53.249,53.249,0,0,1,88.088,288c5.082,0,19.94,4.059,25.053,7.9a38.271,38.271,0,0,0,15.75,7.013c-.394,6.368-.614,11.965-.737,16.251-6.914-1.552-10.4-4.729-10.589-4.907l.088.087a8,8,0,1,0-11.306,11.321C107.42,326.733,117.244,336,136,336c18.772,0,28.6-9.285,29.657-10.343a8,8,0,1,0-11.314-11.314c-.042.042-3.459,3.148-10.2,4.739.139-4.833.392-10.492.793-16.568a38.372,38.372,0,0,0,13.922-6.617c5.113-3.838,19.971-7.9,25.053-7.9a53.249,53.249,0,0,1,41.021,18.461c12.175,14.121,17.324,34.54,14.127,56.022l-5,33.576A161.639,161.639,0,0,1,215.4,451.275ZM428.72,431.081C394.093,462.627,349.8,480,304,480a183.62,183.62,0,0,1-76.872-17.161c.775-1.227,1.528-2.479,2.246-3.766q2.953-5.29,5.529-10.772A162.625,162.625,0,0,0,304,464c39.762,0,78.611-15.013,109.392-42.274,27.05-23.957,44.751-54.839,49.387-85.726h16.914C477.149,369.353,458.89,403.6,428.72,431.081Z" fill="black" /></Svg>
                    </TouchableOpacity>
                    <TouchableOpacity style={{alignItems: 'center', margin: hp(4)}} onPress={() => navigation.navigate('Dried-Fruits')} >
                        <Svg viewBox="0 0 512 512" height={hp(4)} width="512"><Path d="m489.037 105.038c-3.312-17.874-19.306-30.636-37.469-29.898-36.189 1.47-101.748 12.432-176.683 63.716 18.927 48.477 32.599 110.867 32.599 190.009 0 95.718-45.27 159.433-106.78 177.713 57.487 17.201 127.021-6.14 182.995-76.288 119.018-149.16 115.241-271.813 105.338-325.252z" fill="#994e37"/><Path d="m139.025 8.929c13.737-11.905 34.199-11.905 47.936 0 41.071 35.594 120.523 129.112 120.523 319.936 0 114.427-64.691 183.135-144.491 183.135s-144.491-68.708-144.491-183.135c.001-190.824 79.453-284.342 120.523-319.936z" fill="#cc624e"/><Path d="m307.484 328.865c0 95.718-45.27 159.433-106.78 177.713 10.165 3.042 20.708 4.809 31.484 5.281 56.028-23.451 95.918-86.089 95.918-176.926 0-87.435-16.324-154.87-38.114-205.957-4.989 3.116-10.026 6.402-15.107 9.88 18.927 48.477 32.599 110.867 32.599 190.009z" fill="#8c4534"/><Path d="m186.961 8.929c-9.378-8.128-21.891-10.702-33.258-7.732 5.283 1.38 10.319 3.955 14.678 7.732 41.071 35.594 120.523 129.112 120.523 319.936 0 109.951-59.731 177.677-135.2 182.809 3.073.209 6.169.327 9.29.327 79.8 0 144.491-68.708 144.491-183.135-.001-190.825-79.453-284.343-120.524-319.937z" fill="#bc574a"/><G fill="#994e37"><Path d="m199.189 20.266c-4.339-4.289-8.447-8.061-12.228-11.337-4.178-3.621-8.979-6.133-14.022-7.552 10.591 19.477 24.395 51.154 36.138 98.83 15.865 64.414 23.909 141.343 23.909 228.65 0 105.965-26.591 168.014-56.383 182.454 10.856-1.091 21.361-3.491 31.385-7.137 6.329-8.244 12.081-18.354 17.103-30.227 15.294-36.161 23.379-86.332 23.379-145.089 0-88.553-8.195-166.728-24.359-232.353-7.86-31.911-16.674-56.986-24.922-76.239z"/><Path d="m93 328.858c0-87.306 8.044-164.235 23.909-228.65 11.743-47.676 25.548-79.354 36.139-98.831-5.044 1.418-9.845 3.931-14.023 7.552-3.781 3.277-7.889 7.048-12.228 11.337-8.248 19.253-17.063 44.327-24.922 76.238-16.163 65.625-24.359 143.8-24.359 232.353 0 58.757 8.085 108.927 23.38 145.089 5.022 11.873 10.773 21.983 17.102 30.227 10.024 3.646 20.529 6.046 31.385 7.138-29.792-14.439-56.383-76.488-56.383-182.453z"/><Path d="m170.735 511.779v-510.951c-5.099-1.098-10.385-1.098-15.484 0v510.951c2.564.145 5.145.221 7.742.221 2.598 0 5.178-.077 7.742-.221z"/></G><Path d="m295.232 207.101c70.113-68.217 140.579-114.988 172.374-128.967-4.923-2.141-10.375-3.224-16.039-2.994-4.152.169-8.695.464-13.591.93-36.409 20.94-91.027 60.193-146.868 113.496 1.457 5.698 2.832 11.544 4.124 17.535z" fill="#70362b"/><Path d="m491.574 121.937c-.727-6.222-1.604-11.868-2.536-16.899-1.019-5.499-3.242-10.511-6.356-14.798-4.464 28.126-16.949 66.306-34.106 103.935-28.581 62.683-69.958 126.438-122.983 189.497-12.223 14.536-24.016 26.667-34.974 36.982-6.593 15.835-14.933 29.806-24.697 41.753 18.807-15.262 44.017-36.06 71.522-68.77 53.928-64.133 96.059-129.08 125.22-193.038 14.727-32.302 23.586-58.781 28.91-78.662z" fill="#70362b"/><Path d="m305.924 283.683c.534 7.597.944 15.361 1.205 23.316l174.278-218.414c-3.301-4.038-7.432-7.335-12.103-9.657z" fill="#70362b"/><Path d="m311.215 191.917c-5.316 4.934-10.653 10.003-15.979 15.185-1.286-5.868-2.642-11.718-4.129-17.538 5.161-4.934 10.323-9.744 15.453-14.431 1.631 5.45 3.179 11.045 4.655 16.784z" fill="#5e2b25"/><Path d="m323.468 386.178c-2.188 11.489-5.12 22.328-8.723 32.495-18.55 18.983-35.324 32.784-48.815 43.726 5.21-6.396 9.905-13.204 14.067-20.325 2.004-3.43 3.897-6.927 5.65-10.492 1.766-3.593 3.297-7.294 4.975-10.927 10.312-9.713 21.378-21.047 32.846-34.477z" fill="#5e2b25"/><Path d="m326.1 283.21v.01l-18.962 23.763-.01.01c-.134-3.974-.299-7.907-.495-11.789-.206-3.881-.444-7.721-.712-11.52l.021-.021 18.003-22.565c.834 7.196 1.567 14.566 2.155 22.112z" fill="#5e2b25"/></Svg>
                    </TouchableOpacity>
                    <TouchableOpacity style={{alignItems: 'center', margin: hp(4), opacity: 0.2}} onPress={() => navigation.navigate('Exotics')} >
                        <Svg  viewBox="0 0 512 512" height={hp(4)} width="512" stroke="black" strokeWidth="5"><Path d="m490 216.9c4.7-9.5 7.2-20 7.2-30.6 0-35.7-27.3-65.2-62.2-68.6 3.2-14.6-2.1-30.8-14.7-43.2-16.8-16.6-40.5-21.7-61.8-13.8-8-14.8-21.2-27.3-38.5-36.5-18.3-9.7-40-14.7-60.9-14.1-19.7.6-38.1 6.1-53.3 15.9-15.4 10-27.2 24-35 41.7-22.7-10.4-45.1-9.5-63.8 2.6-20.6 13.3-33 38.8-31.1 63.5.1 1.2.2 2.3.4 3.5-30.3-1.6-57.7 19.7-62.9 50.3-4.9 29.1 11.8 56.9 38.5 66.8-6.4 13.1-6.6 28.5-.4 41.9 8.3 18 26.1 28.6 44.7 28.6 4.1 0 8.2-.5 12.3-1.6l71.6 153.9c5.9 12.7 18.7 20.8 32.6 20.8h.4l86.4-.9c15.7-.2 29.3-10.3 34-25.3 1.5-5 3.1-10.1 4.7-15.3 12.6-41.2 27.5-90.3 57.9-140.6 4.8 1.9 9.9 2.9 14.9 2.9 7.5 0 15.1-2.1 21.7-6.4 8.2-5.3 14.2-13.3 17-22.5 1.4.1 2.7.2 4.1.2 25.1 0 45.5-20.4 45.5-45.5.1-10.1-3.2-19.8-9.3-27.7zm-464.7-27.2c4.4-25.7 28.3-43.3 54-40 .7 1.9 1.4 3.7 2.2 5.5-8.7 10.7-13.9 23.9-14.6 37.6-.8 15.3 4 30.2 13.5 42.1 2.6 3.3 5.5 6.2 8.7 8.9-7.7 2.7-16 3.4-24.1 2-26.4-4.6-44.2-29.7-39.7-56.1zm37.1 101.7c-5-10.9-4.4-23.4 1.4-33.8 3.1.5 6.2.7 9.3.7 1.7 0 3.3-.1 5-.2l25.2 54.2c-16.4 3.2-33.6-5-40.9-20.9zm264.3 161.6c-1.6 5.2-3.1 10.3-4.7 15.3-3.1 10-12.2 16.8-22.7 16.9l-86.4.9c-.1 0-.2 0-.3 0-9.3 0-17.8-5.4-21.8-13.9l-100.5-216.4c3.7-1.1 7.4-2.6 10.9-4.4 6.7 3.3 14.1 5.5 21.9 6.2 1.3.1 2.6.2 4 .2 7.8 15.3 40.2 78.7 50.3 96.6 5 9 13 14.2 21.1 14.2 1.6 0 3.3-.2 4.9-.6 10.2-2.7 16.8-13 16.7-26.2 0-.2 0-.3 0-.5l-7.1-86.1c9.9 5.2 20.3 8.9 31 11l17.8 100.9c2.1 11.9 12.3 20.2 24 20.2 1.2 0 2.3-.1 3.5-.3 6.7-1 12.7-4.7 16.6-10.2l78.5-113.1c2.4.3 4.8.4 7.2.4 6.8 0 13.5-1 20-3 1 2.2 2.2 4.4 3.5 6.4-52 66.1-72.1 132.2-88.4 185.5zm-149.4-182.7c-11.6 4.3-23.7 2.7-32.8-4.5-1.7-3.4-3.2-6.3-4.5-8.8 10.8-1.8 21.1-6.4 30-13.5 4.2-3.4 8-7.3 11.2-11.5 5.7 5.7 11.7 10.7 17.9 15.1-2.8 10.4-10.8 19.1-21.8 23.2zm24.5-3 6.2 74.8c0 7.5-3.1 13.1-7.8 14.3-4.3 1.1-9.1-1.9-12.5-7.8-6.2-11.2-21.8-41.1-34.2-65.3 3.5.9 7.2 1.3 10.9 1.3 5.7 0 11.4-1 17.1-3.2 8.1-2.9 15-7.8 20.3-14.1zm128.7-18.8c3.3-2.2 6.6-4.5 9.7-7 .1.2.3.3.4.5 8.4 9.1 19 15.8 30.8 19.3l-75.6 108.8c-2 2.8-5 4.7-8.4 5.2-5.4.8-10.5-2-12.9-6.7zm-60 100.3-9.2-51.9c7.5 4.3 16.6 7.2 26 7.2 1.4 0 2.7-.1 4.1-.2zm27.3-58.7c-14.4 5.7-32.8-2.2-39.6-11.1l-1.9-11c2.9.2 5.9.4 8.9.4 16.5 0 32.5-3.5 47.5-10.1zm128.6 12.2c-7.2 4.6-15.8 5.7-23.7 3.2 6.1-9.5 12.8-19 20.2-28.5 4.5 4.3 9.8 7.7 15.4 9.9-2.1 6.4-6.3 11.8-11.9 15.4zm27.5-24.2c-12.7 0-25.6-9.1-31.3-21.4 5.5-2.8 10.8-6.4 15.5-10.8 7.3-6.7 13-14.9 16.9-24 1.4-3.3-.4-7.1-3.9-8.1-2.9-.8-6 .7-7.2 3.5-3.1 7.5-7.9 14.2-13.9 19.8-14.6 13.5-34.8 18.3-54 13-10.2-2.8-19.3-8.5-26.5-16.3-12.5-13.5-17.6-32.3-13.8-50.4 1.6-7.8 4.9-15.1 9.5-21.5 1.6-2.2 1.6-5.1 0-7.2-2.4-3.2-7.3-3.2-9.6 0-5.7 7.8-9.6 16.7-11.6 26.2-3.7 17.6-.3 35.9 9.1 50.9-20 16.1-43.4 24.5-67.8 24.5-28.6 0-55.3-12-77.4-34.8 4.8-9.7 7.2-20.6 6.7-31.5-.2-3.6-3.4-6.3-6.9-5.7-3.1.5-5.2 3.2-5.1 6.3.8 16.6-6.6 32.9-20 43.6-11 8.8-24.6 12.9-38.4 11.6-13.7-1.3-25.9-7.9-34.4-18.5-14-17.5-14.3-42.6-1.6-61.1 6.7 8.8 15.9 16 27.2 21 3 1.4 6.6 0 7.9-3s0-6.6-3-7.9c-19.4-8.6-30.9-24-32.4-43.3-1.6-20.5 8.6-41.6 25.5-52.5 16.5-10.7 36.9-10.4 57.5.8 1.5.8 3.3 1 5 .3 1.6-.6 2.9-1.9 3.5-3.5 12.9-34.5 42-54.9 79.9-56 39.5-1.2 77.8 19.3 90.8 48.8.7 1.5 1.9 2.7 3.4 3.2 1.5.6 3.2.5 4.7-.3 21.8-10.7 42.5-1.8 53.6 9.2 13.8 13.6 13.9 28.4 9.5 37.7-.9 1.9-.7 4.1.4 5.9 1.2 1.8 3.1 2.8 5.3 2.7h1.2c31.4 0 57 25.5 57 57 0 10-2.6 19.8-7.6 28.4-1.3 2.3-1 5.2.8 7.1 5.8 6.2 9.1 14.3 9.1 22.9-.1 18.4-15.1 33.4-33.6 33.4z" fill="black" /></Svg>
                    </TouchableOpacity>      
                    
                </View>
            
                <StatusBar style="auto" />
                <View style={styles.container}>
                    <View
                        style={{
                        backgroundColor: '#fff',
                        flexDirection: 'row',
                        alignItems: 'center',
                        marginBottom: hp(4)
                        }}
                    >
                        <View style={{flex: 0.1, justifyContent: 'flex-end', alignItems: 'flex-end', marginRight: 5}}>
                            <TouchableOpacity onPress={() => searchInputRef.current.focus()}>
                                <FontAwesome name="search" size={20} color="black"  />
                            </TouchableOpacity>
                        </View>
                        <View style={{flex: 1}}>
                            <TextInput
                                autoCapitalize="none"
                                autoCorrect={false}
                                clearButtonMode="always"
                                value={query}
                                onChangeText={(text) => searchFilterFunction(text)}
                                ref={searchInputRef}
                                placeholder="Search"
                            />
                        </View>
                    </View>
                    <FlatList 
                        data={filteredList}
                        keyExtractor={(item, index) => index.toString()}
                        renderItem={({ item }) => (
                                <View key={item.id} style={{flexDirection: 'row', marginBottom: hp(4), backgroundColor: 'white', shadowOffset: {width: 1.5, height: 1.5}, elevation: 1.5, margin: wp(1), padding: wp(6), borderRadius: 10}}>
                                    <View style={{flex: 1}}>
                                        <Image source={{uri: item.image}} style={{width: 100, height: 80, borderRadius: 5}}  />
                                        <TouchableOpacity onPress={() => navigation.navigate('Details', {detailItem: item})} activeOpacity={1}>
                                            <Text style={{textAlign: 'center', fontFamily: 'sofia-medium'}}>View Details &raquo;</Text>
                                        </TouchableOpacity>
                                    </View>
                                    <View style={{flex: 1}}>
                                        <Text style={{textAlign: 'center', fontFamily: 'sofia-black'}}>{item.name}</Text>
                                        <Text style={{textAlign: 'center', fontFamily: 'sofia-medium'}}>{item.description}</Text>
                                        {item.previous_price > 0 ? 
                                            <View style={{flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>
                                                <Text style={{textAlign: 'center', fontFamily: 'sofia-medium', textDecorationLine: 'line-through', marginRight: wp(2)}}>{item.previous_price}</Text>
                                                <Text style={{textAlign: 'center', fontFamily: 'sofia-bold', fontSize: wp(5)}}>{item.price}</Text>
                                            </View>:
                                            <Text style={{textAlign: 'center', fontFamily: 'sofia-bold'}}>{item.price}</Text>
                                        }
                                            
                                                
                                                {search(item) ? cartData.map((item1) => {
                                                    return item1.ordereditem  === item.name ? 
                                                        
                                                        <View key={item1.id} style={{flexDirection: 'row', justifyContent: 'center'}}>
                                                            
                                                            <TouchableOpacity onPress={buildCart(item)}>
                                                                <Text>+ </Text>
                                                            </TouchableOpacity>
                                                            <Text> {item1.item_count} </Text> 
                                                            <TouchableOpacity onPress={reduceItem(item)}>
                                                                <Text> -</Text>
                                                            </TouchableOpacity>
                                                        </View>
                                                        : null
                                                    }): 
                                                    <TouchableOpacity onPress={buildCart(item)}>
                                                        <Text style={{textAlign: 'center', fontFamily: 'sofia-medium'}}>Add to cart</Text>
                                                    </TouchableOpacity>
                                                }
                                        
                                    </View>
                                </View>
                        )}
                    />
                </View>

            {cartStatus !==401 ? cartData.length > 0 ? handleOpen(): handleClose(): null}
            <View style={[styles.sheet]}>
                <Animated.View style={[styles.popup, slideUp]}>
                    <Text style={{flex: 1, textAlign: 'center'}}>Items added to your cart!</Text>
                    <TouchableOpacity style={{flex: 1}} onPress={() => navigation.navigate('cart')}>
                    <Text style={{textAlign: 'center'}}>View Cart</Text>
                    </TouchableOpacity>
                </Animated.View>
            </View>
        </View>
    )
}


const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        paddingTop: hp(5),
    },
    refreshcontainer: {
          flex: 1,
          backgroundColor: 'white',
          flexDirection: 'row',
    },
    refreshscrollview: {
          flex: 1,
          textAlign: 'center',
          alignItems: 'center',
          justifyContent: 'center',
    },
    sheet: {
        position: "absolute",
        top: Dimensions.get('window').height,
        left: 0,
        right: 0,
        height: "100%",
        justifyContent: "flex-end",
      },
      popup: {
        backgroundColor: "#99b898",
        elevation: 3,
        shadowOffset: {width: 3, height: 3},
        marginHorizontal: 15,
        marginBottom: 5,
        borderTopLeftRadius: 5,
        borderTopRightRadius: 5,
        borderBottomLeftRadius: 5,
        borderBottomRightRadius: 5,
        minHeight: 60,
        flexDirection: 'row',
        alignItems: 'center'
      },
});